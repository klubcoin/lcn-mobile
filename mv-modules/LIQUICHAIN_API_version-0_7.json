[ {
  "active" : true,
  "code" : "LIQUICHAIN_API",
  "description" : "Liquichain json-rpc API",
  "license" : "GPL",
  "currentVersion" : "0.7",
  "transient" : true,
  "inDraft" : true,
  "codeOnly" : false,
  "moduleItems" : [ {
    "dtoClassName" : "org.meveo.api.dto.technicalservice.endpoint.EndpointDto",
    "dtoData" : {
      "code" : "jsonrpc",
      "description" : "eth json rpc api",
      "secured" : false,
      "checkPathParams" : false,
      "serviceCode" : "io.liquichain.api.rpc.EthApiScript",
      "synchronous" : true,
      "method" : "POST",
      "parameterMappings" : [ ],
      "pathParameters" : [ ],
      "roles" : [ ],
      "returnedVariableName" : "result",
      "serializeResult" : false
    }
  }, {
    "dtoClassName" : "org.meveo.api.dto.ScriptInstanceDto",
    "dtoData" : {
      "active" : true,
      "code" : "io.liquichain.api.rpc.EthApiScript",
      "description" : "eth rpc api",
      "inputs" : [ {
        "name" : "projectId",
        "type" : "String",
        "description" : null
      } ],
      "outputs" : [ {
        "name" : "result",
        "type" : "String",
        "description" : null
      } ],
      "generateOutputs" : false,
      "type" : "JAVA",
      "transactionType" : "SAME",
      "script" : "package io.liquichain.api.rpc;\r\n\r\nimport io.liquichain.core.BlockForgerScript;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class EthApiScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(EthApiScript.class);\r\n  \r\n    private long chainId=76;\r\n\r\n    private String result;\r\n\r\n    private int networkId = 7;\r\n\r\n    private long blockHeight = 1662295;\r\n\r\n    private BigInteger balance = new BigInteger(\"999965000000000000000\");\r\n\r\n    private String exampleBlock = \"{\" + \"\\\"difficulty\\\":\\\"0x5\\\",\" + \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\" + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\" + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\" + \"\\\"logsBloom\\\":\\\"0xminer\\\":\\\"0x0000000000000000000000000000000000000000\\\",\" + \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\" + \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" + \"\\\"number\\\":\\\"0x1b4\\\",\" + \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\" + \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" + \"\\\"size\\\":\\\"0x260\\\",\" + \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\" + \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" + \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" + \"\\\"transactions\\\":[\" + \"],\" + \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \"\\\"uncles\\\":[  \" + \"]}\";\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n  \tprivate String projectId;\r\n  \r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n      \t//log.info(\"projectId : {}\", projectId);\r\n        blockHeight = System.currentTimeMillis()/(1000000l);\r\n        log.info(\"blockHeight:{}, p:{}\",blockHeight, parameters);\r\n        String method = \"\"+ parameters.get(\"method\");\r\n        String requestId = \"\"+ parameters.get(\"id\");\r\n        switch(method) {\r\n            case \"eth_chainId\":\r\n                result = createResponse(requestId, \"0x4c\");\r\n                break;\r\n            case \"web3_clientVersion\":\r\n                result = createResponse(requestId, \"liquichainCentral\");\r\n                break;\r\n            case \"net_version\":\r\n                result = createResponse(requestId, \"\" + networkId);\r\n                break;\r\n            case \"eth_blockNumber\":\r\n                result = createResponse(requestId, \"0x\"+Long.toHexString(blockHeight));\r\n                break;\r\n            case \"eth_getBalance\":\r\n                log.info(\"params={}\", parameters.get(\"params\"));\r\n                ArrayList<String> params = (ArrayList<String>)parameters.get(\"params\");\r\n                String hash = params.get(0);\r\n            \tif(hash.startsWith(\"0x\")){\r\n                  hash=hash.substring(2);\r\n            \t}\r\n                result = getBalance(requestId,hash);\r\n                break;\r\n          case \"eth_getBlockByNumber\":\r\n                result = createResponse(requestId, exampleBlock);\r\n                break;\r\n          case \"eth_gasPrice\":\r\n                result = createResponse(requestId, \"0x0\");\r\n                break;\r\n          case \"eth_sendRawTransaction\":\r\n                log.info(\"received transaction : params={}\", parameters.get(\"params\"));\r\n                ArrayList<String> params2 = (ArrayList<String>)parameters.get(\"params\");\r\n                String transacEncoded = params2.get(0);\r\n                result = processTransaction(requestId,transacEncoded) ;\r\n                break;\r\n          case \"eth_getTransactionByHash\":\r\n               ArrayList<String> params3 = (ArrayList<String>)parameters.get(\"params\");\r\n               String hash2 = params3.get(0);\r\n               result = getTransactionByHash(requestId,hash2);\r\n               break;\r\n        }\r\n    }\r\n\r\n    public static String hex(byte[] bytes) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (byte aByte : bytes) {\r\n            result.append(String.format(\"%02x\", aByte));\r\n        }\r\n        return result.toString();\r\n    }\r\n  \r\n    private String toBigHex(String i){\r\n       return \"0x\"+new BigInteger(i).toString(16);\r\n    }\r\n  \r\n    private String getTransactionByHash(String requestId,String hash){\r\n       try {\r\n            log.info(\"lookup transaction hesHash={}\",hash.substring(2));\r\n            Transaction transac = crossStorageApi.find(defaultRepo, Transaction.class).by(\"hexHash\", hash.substring(2)).getResult();\r\n         \tString result =\"{\\n\";\r\n            result+=\"\\\"blockHash\\\": \\\"0x\"+transac.getBlockHash()+\"\\\",\\n\";\r\n            result+=\"\\\"blockNumber\\\": \\\"\"+toBigHex(transac.getBlockNumber())+\"\\\",\\n\";\r\n            result+=\"\\\"from\\\": \\\"0x\"+transac.getFromHexHash()+\"\\\",\\n\";\r\n            result+=\"\\\"gas\\\": \\\"0x1d45e\\\",\\n\";\r\n            result+=\"\\\"gasPrice\\\": \\\"0xfa56ea00\\\",\\n\";\r\n            result+=\"\\\"hash\\\": \\\"\"+hash+\"\\\",\\n\";\r\n    \t\tresult+=\"\\\"input\\\": \\\"\\\",\\n\";\r\n    \t\tresult+=\"\\\"nonce\\\": \\\"\"+toBigHex(transac.getNonce())+\"\\\",\\n\";\r\n    \t\tresult+=\"\\\"r\\\": \\\"\"+transac.getR()+\"\\\",\\n\";\r\n    \t\tresult+=\"\\\"s\\\": \\\"\"+transac.getS()+\"\\\",\\n\";\r\n    \t\tresult+=\"\\\"to\\\": \\\"0x\"+transac.getToHexHash()+\"\\\",\\n\";\r\n    \t\tresult+=\"\\\"transactionIndex\\\": \\\"0x11\\\",\";\r\n    \t\tresult+=\"\\\"v\\\": \\\"\"+transac.getV()+\"\\\",\";\r\n    \t\tresult+=\"\\\"value\\\": \\\"\"+toBigHex(transac.getValue())+\"\\\"\\n\";\r\n            result+=\"}\";\r\n            log.info(\"res={}\"+result);\r\n            return createResponse(requestId, result);\r\n        } catch (Exception e) {\r\n            //e.printStackTrace();\r\n            return createErrorResponse(requestId, \"-32001\", \"Resource not found\");\r\n        }\r\n    }\r\n  \r\n    private String processTransaction(String requestId,String hexTransactionData){\r\n      String result =\"0x0\";\r\n      String hash =  Hash.sha3(hexTransactionData);\r\n      Transaction existingTransaction=null;\r\n      try {\r\n        existingTransaction = crossStorageApi.find(defaultRepo, Transaction.class).by(\"hexHash\", hash.substring(2)).getResult();\r\n      }catch(Exception e){}\r\n      if(existingTransaction!=null){\r\n          return createErrorResponse(requestId, \"-32001\", \"transaction already exists\");\r\n      }\r\n      RawTransaction t = TransactionDecoder.decode(hexTransactionData);\r\n      log.info(\"nonce:{} to:{} , value:{}\",t.getNonce(),t.getTo(),t.getValue() );\r\n      if(t instanceof SignedRawTransaction){\r\n        SignedRawTransaction signedResult = (SignedRawTransaction) t;\r\n        Sign.SignatureData signatureData = signedResult.getSignatureData();\r\n        //byte[] encodedTransaction = TransactionEncoder.encode(t);\r\n        try {\r\n        log.info(\"from:{} chainedId:{}\",signedResult.getFrom(),signedResult.getChainId());\r\n        Transaction transac = new Transaction();\r\n        transac.setHexHash(hash.substring(2));\r\n        transac.setFromHexHash(signedResult.getFrom().substring(2));\r\n        transac.setToHexHash(t.getTo().substring(2));\r\n        transac.setNonce(\"\"+t.getNonce());\r\n        transac.setGasPrice(\"\"+t.getGasPrice());\r\n        transac.setGasLimit(\"\"+t.getGasLimit());\r\n        transac.setValue(\"\"+t.getValue());  \r\n        transac.setSignedHash(hexTransactionData);\r\n        transac.setCreationDate(java.time.Instant.now());\r\n        transac.setV(hex(signatureData.getV()));\r\n        transac.setS(hex(signatureData.getS()));\r\n        transac.setR(hex(signatureData.getR()));\r\n        String uuid = crossStorageApi.createOrUpdate(defaultRepo, transac);\r\n        transferValue(transac,t.getValue());\r\n        result = hash;\r\n        log.info(\"created transaction with uuid:{}\",uuid);\r\n        } catch(Exception e){\r\n          //e.printStackTrace();\r\n          return createErrorResponse(requestId, \"-32001\", e.getMessage());\r\n        }\r\n      }\r\n      return createResponse(requestId, result);\r\n    }\r\n  \r\n    private String createResponse(String requestId, String result) {\r\n        String res = \"{\\n\";\r\n        res += \"  \\\"id\\\": \" + requestId + \",\\n\";\r\n        res += \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\";\r\n       if(result.startsWith(\"{\")){\r\n        res += \"  \\\"result\\\": \" + result + \"\\n\";\r\n       } else {\r\n        res += \"  \\\"result\\\": \\\"\" + result + \"\\\"\\n\";\r\n       }\r\n        res += \"}\";\r\n        //log.info(\"res:{}\", res);\r\n        return res;\r\n    }\r\n  \r\n    private void transferValue(Transaction transac,BigInteger value) throws Exception{\r\n      String message=\"transfer error\";\r\n      try {\r\n        message = \"cannot find origin wallet\";\r\n        Wallet originWallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", transac.getFromHexHash()).getResult();\r\n        message = \"cannot find destination wallet\";\r\n        Wallet destinationWallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", transac.getToHexHash()).getResult();\r\n        message = \"insufficient balance\";\r\n        BigInteger originBalance = new BigInteger(originWallet.getBalance());\r\n        log.info(\"originWallet 0x{} old balance:{}\",transac.getFromHexHash(),originWallet.getBalance());\r\n        if(value.compareTo(originBalance)<=0){\r\n          BlockForgerScript.addTransaction(transac);\r\n        } else {\r\n          throw new RuntimeException(\"insufficient balance\");\r\n        }\r\n      } catch (Exception e) {\r\n           throw new Exception(message);\r\n      }\r\n    }\r\n  \r\n  \tprivate String createErrorResponse(String requestId, String errorCode, String message) {\r\n        String res = \"{\\n\";\r\n        res += \"  \\\"id\\\": \" + requestId + \",\\n\";\r\n        res += \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\";\r\n        res += \"  \\\"error\\\": { \\\"code\\\" : \"+errorCode+\" , \\\"message\\\" : \\\"\" + message + \"\\\"}\\n\";\r\n        res += \"}\";\r\n        log.info(\"err:{}\", res);\r\n        return res;\r\n    }\r\n\r\n    private String getBalance(String requestId, String hash) {\r\n        try {\r\n            Wallet wallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", hash).getResult();\r\n            return createResponse(requestId, \"0x\"+new BigInteger(wallet.getBalance()).toString(16));\r\n        } catch (Exception e) {\r\n            //e.printStackTrace();\r\n            return createErrorResponse(requestId, \"-32001\", \"Resource not found\");\r\n        }\r\n    }\r\n  \r\n  \tpublic void setProjectId(String projectId){\r\n      this.projectId = projectId;\r\n    }\r\n}\r\n",
      "executionRoles" : [ ],
      "sourcingRoles" : [ ],
      "mavenDependencies" : [ {
        "groupId" : "org.web3j",
        "artifactId" : "core",
        "version" : "4.8.4",
        "coordinates" : "org.web3j:core:4.8.4"
      } ],
      "importScriptInstances" : [ {
        "active" : true,
        "code" : "io.liquichain.core.BlockForgerScript",
        "description" : "Bock forging script",
        "inputs" : [ ],
        "outputs" : [ {
          "name" : "lastBlock",
          "type" : "Block",
          "description" : null
        } ],
        "generateOutputs" : false,
        "type" : "JAVA",
        "transactionType" : "SAME",
        "script" : "package io.liquichain.core;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.time.Instant;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.stream.Collectors;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Block;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class BlockForgerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(BlockForgerScript.class);\r\n  \r\n    private static long chainId=76;\r\n\r\n    private int networkId = 7;\r\n\r\n    static private long blockHeight = 1662295;\r\n  \r\n    private Block parentBlock=null;\r\n    \r\n    private String exampleBlock = \"{\" +\r\n      \"\\\"difficulty\\\":\\\"0x5\\\",\" +\r\n      \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\r\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\" \r\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\r\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\r\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" +\r\n      \"\\\"number\\\":\\\"0x1b4\\\",\" +\r\n      \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\" + \r\n      \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" +\r\n      \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" +\r\n      \"\\\"size\\\":\\\"0x260\\\",\" +\r\n      \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\" +\r\n      \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" +\r\n      \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" +\r\n      \"\\\"transactions\\\":[\" + \"],\" + \r\n      \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \r\n      \"\\\"uncles\\\":[  \" + \"]}\";\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private static List<Transaction> currentTransactions = new ArrayList<>();\r\n    private static List<Transaction> nextTransactions = new ArrayList<>();\r\n  \r\n    private static Instant nextBlockDate;\r\n    private static AtomicBoolean isForging = new AtomicBoolean(false);\r\n  \r\n    public static void addTransaction(Transaction t){\r\n      if(isForging.get()){\r\n          nextTransactions.add(t);\r\n      } else {\r\n          currentTransactions.add(t);\r\n      }\r\n    }\r\n  \r\n    public Block getLastBlock(){\r\n      //FIXME retrieve block with most recent creationDate\r\n      return null;\r\n    }\r\n  \r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n      //log.info(\"execute forging\");\r\n      if(parentBlock==null){\r\n      \tlog.info(\"retreive last block from chain\");\r\n        parentBlock = getLastBlock();\r\n      }\r\n      if(isForging.getAndSet(true)){\r\n         log.error(\"we are already forging\");\r\n         return;\r\n      } \r\n      if(currentTransactions.size()==0){\r\n        log.info(\"no transaction to forge\");\r\n        isForging.set(false);\r\n        return;\r\n      } else {\r\n        //log.info(\"forging {} transactions\",currentTransactions.size());\r\n        Map<String,Wallet> wallets = new HashMap<>();\r\n        List<Transaction> orderedTransactions = currentTransactions.stream().sorted((t1,t2)->(t1.getCreationDate().compareTo(t2.getCreationDate()))).collect(Collectors.toList());\r\n        \r\n        //FIXME should use lastBlock blockNumber++\r\n        blockHeight++;\r\n        \r\n        String transactionHashes=\"\";\r\n        List<Transaction> invalidTransactions = new ArrayList<>();\r\n        for(Transaction t: currentTransactions){\r\n          log.info(\" transaction date : {}\",t.getCreationDate());\r\n          if(!wallets.containsKey(t.getFromHexHash())){\r\n            try{\r\n            \tWallet originWallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", t.getFromHexHash()).getResult();\r\n                log.info(\"add originWallet:{} {} to map\",originWallet.getHexHash(),originWallet.getBalance());\r\n                wallets.put(t.getFromHexHash(),originWallet);\r\n            } catch(Exception e){\r\n              log.info(\" cannot find origin wallet, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try {\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n          if(t.getBlockNumber() == null){\r\n            Wallet originWallet = wallets.get(t.getFromHexHash());\r\n          \tlog.info(\"originWallet 0x{} old balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n            BigInteger transacValue = new BigInteger(t.getValue());\r\n          \tif(new BigInteger(originWallet.getBalance()).compareTo(transacValue)>=0){\r\n                originWallet.setBalance(\"\"+new BigInteger(originWallet.getBalance()).add(transacValue.negate()));\r\n                try{\r\n            \t\tWallet destinationWallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", t.getToHexHash()).getResult();\r\n          \t\t\tlog.info(\"destinationWallet 0x{} old balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n                    destinationWallet.setBalance(\"\"+new BigInteger(destinationWallet.getBalance()).add(transacValue));\r\n          \t\t\tcrossStorageApi.createOrUpdate(defaultRepo, destinationWallet);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} new balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n          \t\t\ttransactionHashes+=t.getHexHash();\r\n                } catch(Exception e){\r\n              \t\tlog.info(\" cannot find destination wallet, set blockNumber to INVALID\");\r\n              \t\tt.setBlockNumber(\"INVALID\");\r\n              \t\ttry{\r\n\t\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n                    } catch(Exception ex){\r\n                \t\tex.printStackTrace();\r\n              \t\t}\r\n              \t\tinvalidTransactions.add(t);\r\n                }\r\n          \t} else {\r\n              log.info(\"insufficient balance, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try{\r\n              \tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n        }\r\n        currentTransactions.removeAll(invalidTransactions);\r\n        Block block =  new Block();\r\n        block.setCreationDate(Instant.now());\r\n        \r\n        //FIXME parent should not be null\r\n        block.setParentHash(parentBlock==null?\"\":parentBlock.getHash());\r\n        block.setSize((long)currentTransactions.size());\r\n        \r\n        //FIXME hash parent hash\r\n        block.setHash(Hash.sha3(transactionHashes).substring(2));\r\n        \r\n        block.setBlockNumber(blockHeight);\r\n        try{\r\n          crossStorageApi.createOrUpdate(defaultRepo, block);\r\n          for(Transaction t: currentTransactions){\r\n              Wallet originWallet = wallets.get(t.getFromHexHash());\r\n              log.info(\"originWallet 0x{} new balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n              crossStorageApi.createOrUpdate(defaultRepo, originWallet);\r\n              t.setBlockHash(block.getHash());\r\n              t.setBlockNumber(\"\"+block.getBlockNumber());\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n          }\r\n\r\n          parentBlock=block;\r\n          currentTransactions = nextTransactions;\r\n          nextTransactions = new ArrayList<>();\r\n        } catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n        \r\n        isForging.set(false);\r\n      }\r\n    }\r\n  \r\n}",
        "executionRoles" : [ ],
        "sourcingRoles" : [ ],
        "mavenDependencies" : [ ],
        "importScriptInstances" : [ ]
      } ]
    }
  } ],
  "moduleDependencies" : [ {
    "code" : "LIQUICHAIN",
    "description" : "Liquichain accounts",
    "currentVersion" : "0.5"
  } ],
  "moduleFiles" : [ ]
} ]